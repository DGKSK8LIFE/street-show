function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var DisableScroll =
/*#__PURE__*/
function () {
  function DisableScroll() {
    var _this = this;

    _classCallCheck(this, DisableScroll);

    _defineProperty(this, "handleWheel", function (e) {
      e.preventDefault();
    });

    _defineProperty(this, "handleScroll", function () {
      var _window;

      (_window = window).scrollTo.apply(_window, _toConsumableArray(_this.lockToScrollPos));
    });

    _defineProperty(this, "handleKeydown", function (e) {
      var keys = _this.options.keyboardKeys;
      /* istanbul ignore else */

      if (['INPUT', 'TEXTAREA'].indexOf(e.target.tagName) !== -1) {
        keys = _this.options.authorizedInInputs;
      }
      /* istanbul ignore else */


      if (keys.indexOf(e.keyCode) !== -1) {
        e.preventDefault();
      }
    });

    this.element = null;
    this.lockToScrollPos = [0, 0];
    this.options = {
      disableWheel: true,
      disableScroll: true,
      disableKeys: true,
      keyboardKeys: [32, 33, 34, 35, 36, 37, 38, 39, 40],
      authorizedInInputs: [32, 37, 38, 39, 40] // space: 32, page up: 33, page down: 34, end: 35, home: 36
      // left: 37, up: 38, right: 39, down: 40

    };
    /* istanbul ignore else */

    if (canUseDOM) {
      require('scrollingelement');

      this.element = document.scrollingElement;
    }
  }
  /**
   * Disable Page Scroll
   * @external Node
   *
   * @param {HTMLElement} [element] - DOM Element, usually document.body
   * @param {object} [options] - Change the initial options
   */


  _createClass(DisableScroll, [{
    key: "on",
    value: function on(element, options) {
      if (!canUseDOM) return;
      this.element = element || this.element;
      this.options = _objectSpread({}, this.options, {}, options);
      var _this$options = this.options,
          disableKeys = _this$options.disableKeys,
          disableScroll = _this$options.disableScroll,
          disableWheel = _this$options.disableWheel;
      /* istanbul ignore else */

      if (disableWheel) {
        document.addEventListener('wheel', this.handleWheel, {
          passive: false
        });
        document.addEventListener('touchmove', this.handleWheel, {
          passive: false
        });
      }
      /* istanbul ignore else */


      if (disableScroll) {
        this.lockToScrollPos = [this.element.scrollLeft || this.element.scrollX, this.element.scrollTop || this.element.scrollY];
        document.addEventListener('scroll', this.handleScroll, {
          passive: false
        });
      }
      /* istanbul ignore else */


      if (disableKeys) {
        document.addEventListener('keydown', this.handleKeydown, {
          passive: false
        });
      }
    }
    /**
     * Re-enable page scrolls
     */

  }, {
    key: "off",
    value: function off() {
      if (!canUseDOM) return;
      document.removeEventListener('wheel', this.handleWheel, {
        passive: false
      });
      document.removeEventListener('touchmove', this.handleWheel, {
        passive: false
      });
      document.removeEventListener('scroll', this.handleScroll, {
        passive: false
      });
      document.removeEventListener('keydown', this.handleKeydown, {
        passive: false
      });
    }
  }]);

  return DisableScroll;
}();

export default new DisableScroll();